var documenterSearchIndex = {"docs":
[{"location":"api/","page":"API","title":"API","text":"CurrentModule = FiveLetterWorda","category":"page"},{"location":"api/#API","page":"API","title":"API","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"","category":"page"},{"location":"api/","page":"API","title":"API","text":"Modules = [FiveLetterWorda]","category":"page"},{"location":"api/#FiveLetterWorda.WordCombination","page":"API","title":"FiveLetterWorda.WordCombination","text":"WordCombination\nWordCombination()\nWordCombination(w::String)\nWordCombination(ws::AbstractVector{String})\n\nA conveniencce data type for a set of words and associated characters.\n\nFields:\n\nchars::Set{Char}\nwords::Set{String}\n\nMethods for union, intersect, push! and in are provided.\n\nSee also nwords and nchars.\n\n\n\n\n\n","category":"type"},{"location":"api/#FiveLetterWorda.adjacency_matrix","page":"API","title":"FiveLetterWorda.adjacency_matrix","text":"adjacency_matrix(words, T::Type{<:AbstractMatrix}=BitMatrix; progress=true)\n\nCompute the adjacency matrix.\n\nDefault is BitMatrix, which is a memory dense format, but which can be slower to read individual elements. Another alternative is Matrix{Bool}, which is noticably faster for reading individual elements but requires 8 times the storage space.\n\n\n\n\n\n","category":"function"},{"location":"api/#FiveLetterWorda.cliques","page":"API","title":"FiveLetterWorda.cliques","text":"cliques(adj, wordlist, order=5; progress=true)\n\nFind all five-cliques in the adjacency matrix adj.\n\nThe cliques are interpreted as entries in wordlist (so the adjacency matrix should reflect the same ordering as wordlist) and the results are then returned as the relevant words.\n\n\n\n\n\n","category":"function"},{"location":"api/#FiveLetterWorda.cliques!","page":"API","title":"FiveLetterWorda.cliques!","text":"cliques!(results::Vector{Vector{String}}, adj, wordlist, order=5;\n         progress=true)\n\nFind all order-cliques in the adjacency matrix adj, storing the result in results.\n\nwarn: Warn\nresult is emptied before being populated.\n\nSee also cliques\n\n\n\n\n\n","category":"function"},{"location":"api/#FiveLetterWorda.main","page":"API","title":"FiveLetterWorda.main","text":"main(n=5; exclude_anagrams=true,\n    adjacency_matrix_type=Matrix{Bool}, order=fld(26, n),\n    progress=true)\n\nDo everything. ðŸ˜‰\n\nFind the set of groups of order n-letter words where each group of words has no shared letters between words.\n\nIf exclude_anagrams=true, then anagrams are removed from the word list before finding the result.\n\nYou can specify the storage type of the adjaceny matrix with adjacency_matrix_type. BitMatrix, is very dense in memory, packing eight vertices into a single byte. Matrix{Bool} stores one vertex per byte and is thus 8 times as large, but noticably faster. See also adjacency_matrix\n\nThe order specifies the order of cliques to find and defaults to fld(26, n), i.e. the maximal possible order for a given word length. Note that cliques of lower order are more common, so there are many more of them.\n\nReturns a named tuple of containing\n\nthe adjacency matrix adj of words, i.e. the matrix of indicators for whether a given pair of words have no letters in common\nthe vector of words used words\nthe vector of WordCombinations found.\n\n\n\n\n\n","category":"function"},{"location":"api/#FiveLetterWorda.n_letter_words-Tuple{Int64}","page":"API","title":"FiveLetterWorda.n_letter_words","text":"n_letter_words()\n\nReturn the set of n-letter words containing n unique letters.\n\nUse remove_anagrams to remove anagrams.\n\n\n\n\n\n","category":"method"},{"location":"api/#FiveLetterWorda.nchars-Tuple{WordCombination}","page":"API","title":"FiveLetterWorda.nchars","text":"nchars(wc::WordCombination)\n\nReturn the number of characters in a wc.\n\nSee also nwords.\n\n\n\n\n\n","category":"method"},{"location":"api/#FiveLetterWorda.nwords-Tuple{WordCombination}","page":"API","title":"FiveLetterWorda.nwords","text":"nwords(wc::WordCombination)\n\nReturn the number of words in a wc.\n\nSee also nchars.\n\n\n\n\n\n","category":"method"},{"location":"api/#FiveLetterWorda.remove_anagrams-Tuple{Vector{String}}","page":"API","title":"FiveLetterWorda.remove_anagrams","text":"remove_anagrams(words::Vector{String})\n\nRemove all anagrams from words.\n\nThis reduces the set of words to the set of equivalence classes under the operation \"anagram\". The representative member from each class is just the first word encountered from that class. If the vector is sorted lexicographically, then this is just the anagram that comes first in the alphabet.\n\n\n\n\n\n","category":"method"},{"location":"api/#FiveLetterWorda.write_tab-Tuple{Any, Vector{Vector{String}}}","page":"API","title":"FiveLetterWorda.write_tab","text":"write_tab(fname, wcs::Vector{Vector{String}})\nwrite_tab(fname, wcs::Vector{WordCollection})\n\nWrite the results out to a tab delimited file.\n\n\n\n\n\n","category":"method"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = FiveLetterWorda","category":"page"},{"location":"#FiveLetterWorda.jl","page":"Home","title":"FiveLetterWorda.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Can you find: five five-letter words with twenty-five unique letters?","category":"page"},{"location":"","page":"Home","title":"Home","text":"Inspired by: https://youtu.be/_-AfhLQfb6w","category":"page"},{"location":"","page":"Home","title":"Home","text":"Matt Parker's original solution: https://github.com/standupmaths/fiveletterworda/","category":"page"}]
}
